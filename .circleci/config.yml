version: 2.1

orbs:
  slack: circleci/slack@4.1

defaults: &nodeMachine
    docker:
        - image: circleci/node:13.8.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      backend-name:
        default: "id"
        type: string
      frontend-name:
        default: "id"
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name <<parameters.backend-name>>
            aws cloudformation delete-stack --stack-name <<parameters.frontend-name>>
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      migration_id:
        default: "id"
        type: string
    steps:
      - checkout
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            curl -k https://kvdb.io/Mjins2pywh7XyGqhFKxNLM/migration_<<parameters.migration_id>> > res.txt
            
            if  grep -q "Not Found" res.txt
            then
              echo "not found"
            else
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi


         
jobs:
  build-frontend:
    <<: *nodeMachine
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    <<: *nodeMachine
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    <<: *nodeMachine
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm run test
                
  test-backend:
    <<: *nodeMachine
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm run test
  
  scan-frontend:
    <<: *nodeMachine
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end audit
          command: |
            cd frontend
            npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    <<: *nodeMachine
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end audit
          command: |
            cd backend
            # npm install oauth-sign@^0.9.0
            # npm audit fix --audit-level=critical --force
            # npm audit --audit-level=critical
      - slack/notify:
          event: fail
          channel: circleci
          template: basic_fail_1

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            echo "[web]" > ~/inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >>  ~/inventory.txt
            pwd
      - run:
          name: Install tar utility for persisting workspace
          command: |
            yum install -y tar gzip
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt
      - destroy-environment:
          backend-name: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
          frontend-name: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
     
  configure-infrastructure:
    docker:
        - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - 98:01:84:fd:5b:e9:72:0a:85:c1:06:d9:35:20:cb:bc
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update  tar gzip ansible 
      - run:
          name: Configure server
          command: |
            cat ~/inventory.txt
            cd .circleci/ansible
            ansible-playbook -i ~/inventory.txt configure-server.yml

  run-migrations:
    <<: *nodeMachine
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
              cd backend
              npm install
              # Run and save the migration output
              npm run migrations > migrations_dump.txt
              cat migrations_dump.txt
      - run:
          name: update certificates
          command: | 
            sudo apt-get update && sudo apt-get install -y ca-certificates
      - run:
          name: Send migration status to kvdb.io OR memstash.io
          command: |   
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
                  curl -k https://kvdb.io/Mjins2pywh7XyGqhFKxNLM/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              else 
                  exit 1
              fi
      - revert-migrations:
          migration_id: migration_${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    <<: *nodeMachine
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update && sudo apt-get install -y tar gzip python ansible
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          backend-name: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
          frontend-name: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-backend:
    docker:
        - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - 98:01:84:fd:5b:e9:72:0a:85:c1:06:d9:35:20:cb:bc
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip python ansible
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            # ansible-playbook -i inventory.txt deploy-backend.yml
      - revert-migrations:
          migration_id: migration_${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          backend-name: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
          frontend-name: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
          context: slack-context
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]